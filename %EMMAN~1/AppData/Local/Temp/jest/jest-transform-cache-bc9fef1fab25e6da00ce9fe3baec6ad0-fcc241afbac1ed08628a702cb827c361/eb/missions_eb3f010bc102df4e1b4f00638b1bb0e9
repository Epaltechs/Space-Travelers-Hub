13a69144d1992e54282c3ffc8d50f947
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.missionsLeft = exports.leaveMission = exports.joinMission = exports.getMissions = exports.default = exports.JoinedMissions = void 0;
const FETCH_MISSIONS = 'missions/missionSlice/FETCH_MISSIONS';
const FETCH_MISSIONS_SUCCESS = 'missions/missionSlice/FETCH_MISSIONS_SUCCESS';
const FETCH_MISSIONS_ERROR = 'missions/missionSlice/FETCH_MISSIONS_ERROR';
const MISSIONS_JOINED = 'missions/missionSlice/MISSIONS_JOINED';
const MISSIONS_LEFT = 'missions/missionSlice/MISSIONS_LEFT';
const appUrl = 'https://api.spacexdata.com/v3/missions';

const getMissions = () => async dispatch => {
  dispatch({
    type: FETCH_MISSIONS
  });
  const missions = await fetch(appUrl);
  const myMissions = await missions.json();
  return dispatch({
    type: FETCH_MISSIONS_SUCCESS,
    myMissions
  });
};

exports.getMissions = getMissions;
const initialState = {
  missions: [],
  status: 'fetching',
  loading: false,
  error: null
};

const populateMissions = myMissions => {
  const missionArr = [];

  for (let i = 0; i < myMissions.length; i += 1) {
    missionArr.push({
      id: myMissions[i].mission_id,
      name: myMissions[i].mission_name,
      description: myMissions[i].description,
      reserved: false
    });
  }

  return missionArr;
};

const joinMission = payload => ({
  type: MISSIONS_JOINED,
  payload
});

exports.joinMission = joinMission;

const leaveMission = payload => ({
  type: MISSIONS_LEFT,
  payload
});

exports.leaveMission = leaveMission;

const JoinedMissions = (state, id) => {
  const newState = state.map(mission => {
    if (mission.id !== id) {
      return mission;
    }

    return { ...mission,
      reserved: true
    };
  });
  return newState;
};

exports.JoinedMissions = JoinedMissions;

const missionsLeft = (state, id) => {
  const newState = state.map(mission => {
    if (mission.id !== id) {
      return mission;
    }

    return { ...mission,
      reserved: false
    };
  });
  return newState;
};

exports.missionsLeft = missionsLeft;

const missionReducer = (state = initialState, action) => {
  switch (action.type) {
    case FETCH_MISSIONS:
      return { ...state,
        loading: true
      };

    case FETCH_MISSIONS_SUCCESS:
      populateMissions(action.myMissions);
      return { ...state,
        loading: false,
        missions: populateMissions(action.myMissions)
      };

    case FETCH_MISSIONS_ERROR:
      return { ...state,
        loading: false,
        error: action.error
      };

    case MISSIONS_JOINED:
      return { ...state,
        missions: JoinedMissions(state.missions, action.payload)
      };

    case MISSIONS_LEFT:
      return { ...state,
        missions: missionsLeft(state.missions, action.payload)
      };

    default:
      return state;
  }
};

var _default = missionReducer;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJGRVRDSF9NSVNTSU9OUyIsIkZFVENIX01JU1NJT05TX1NVQ0NFU1MiLCJGRVRDSF9NSVNTSU9OU19FUlJPUiIsIk1JU1NJT05TX0pPSU5FRCIsIk1JU1NJT05TX0xFRlQiLCJhcHBVcmwiLCJnZXRNaXNzaW9ucyIsImRpc3BhdGNoIiwidHlwZSIsIm1pc3Npb25zIiwiZmV0Y2giLCJteU1pc3Npb25zIiwianNvbiIsImluaXRpYWxTdGF0ZSIsInN0YXR1cyIsImxvYWRpbmciLCJlcnJvciIsInBvcHVsYXRlTWlzc2lvbnMiLCJtaXNzaW9uQXJyIiwiaSIsImxlbmd0aCIsInB1c2giLCJpZCIsIm1pc3Npb25faWQiLCJuYW1lIiwibWlzc2lvbl9uYW1lIiwiZGVzY3JpcHRpb24iLCJyZXNlcnZlZCIsImpvaW5NaXNzaW9uIiwicGF5bG9hZCIsImxlYXZlTWlzc2lvbiIsIkpvaW5lZE1pc3Npb25zIiwic3RhdGUiLCJuZXdTdGF0ZSIsIm1hcCIsIm1pc3Npb24iLCJtaXNzaW9uc0xlZnQiLCJtaXNzaW9uUmVkdWNlciIsImFjdGlvbiJdLCJzb3VyY2VzIjpbIm1pc3Npb25zLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEZFVENIX01JU1NJT05TID0gJ21pc3Npb25zL21pc3Npb25TbGljZS9GRVRDSF9NSVNTSU9OUyc7XHJcbmNvbnN0IEZFVENIX01JU1NJT05TX1NVQ0NFU1MgPSAnbWlzc2lvbnMvbWlzc2lvblNsaWNlL0ZFVENIX01JU1NJT05TX1NVQ0NFU1MnO1xyXG5jb25zdCBGRVRDSF9NSVNTSU9OU19FUlJPUiA9ICdtaXNzaW9ucy9taXNzaW9uU2xpY2UvRkVUQ0hfTUlTU0lPTlNfRVJST1InO1xyXG5jb25zdCBNSVNTSU9OU19KT0lORUQgPSAnbWlzc2lvbnMvbWlzc2lvblNsaWNlL01JU1NJT05TX0pPSU5FRCc7XHJcbmNvbnN0IE1JU1NJT05TX0xFRlQgPSAnbWlzc2lvbnMvbWlzc2lvblNsaWNlL01JU1NJT05TX0xFRlQnO1xyXG5cclxuY29uc3QgYXBwVXJsID0gJ2h0dHBzOi8vYXBpLnNwYWNleGRhdGEuY29tL3YzL21pc3Npb25zJztcclxuXHJcbmV4cG9ydCBjb25zdCBnZXRNaXNzaW9ucyA9ICgpID0+IGFzeW5jIChkaXNwYXRjaCkgPT4ge1xyXG4gIGRpc3BhdGNoKHsgdHlwZTogRkVUQ0hfTUlTU0lPTlMgfSk7XHJcbiAgY29uc3QgbWlzc2lvbnMgPSBhd2FpdCBmZXRjaChhcHBVcmwpO1xyXG4gIGNvbnN0IG15TWlzc2lvbnMgPSBhd2FpdCBtaXNzaW9ucy5qc29uKCk7XHJcbiAgcmV0dXJuIGRpc3BhdGNoKHsgdHlwZTogRkVUQ0hfTUlTU0lPTlNfU1VDQ0VTUywgbXlNaXNzaW9ucyB9KTtcclxufTtcclxuXHJcbmNvbnN0IGluaXRpYWxTdGF0ZSA9IHtcclxuICBtaXNzaW9uczogW10sXHJcbiAgc3RhdHVzOiAnZmV0Y2hpbmcnLFxyXG4gIGxvYWRpbmc6IGZhbHNlLFxyXG4gIGVycm9yOiBudWxsLFxyXG59O1xyXG5cclxuY29uc3QgcG9wdWxhdGVNaXNzaW9ucyA9IChteU1pc3Npb25zKSA9PiB7XHJcbiAgY29uc3QgbWlzc2lvbkFyciA9IFtdO1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbXlNaXNzaW9ucy5sZW5ndGg7IGkgKz0gMSkge1xyXG4gICAgbWlzc2lvbkFyci5wdXNoKHtcclxuICAgICAgaWQ6IG15TWlzc2lvbnNbaV0ubWlzc2lvbl9pZCxcclxuICAgICAgbmFtZTogbXlNaXNzaW9uc1tpXS5taXNzaW9uX25hbWUsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiBteU1pc3Npb25zW2ldLmRlc2NyaXB0aW9uLFxyXG4gICAgICByZXNlcnZlZDogZmFsc2UsXHJcbiAgICB9KTtcclxuICB9XHJcbiAgcmV0dXJuIG1pc3Npb25BcnI7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3Qgam9pbk1pc3Npb24gPSAocGF5bG9hZCkgPT4gKFxyXG4gIHtcclxuICAgIHR5cGU6IE1JU1NJT05TX0pPSU5FRCxcclxuICAgIHBheWxvYWQsXHJcbiAgfVxyXG4pO1xyXG5cclxuZXhwb3J0IGNvbnN0IGxlYXZlTWlzc2lvbiA9IChwYXlsb2FkKSA9PiAoXHJcbiAge1xyXG4gICAgdHlwZTogTUlTU0lPTlNfTEVGVCxcclxuICAgIHBheWxvYWQsXHJcbiAgfVxyXG4pO1xyXG5cclxuZXhwb3J0IGNvbnN0IEpvaW5lZE1pc3Npb25zID0gKHN0YXRlLCBpZCkgPT4ge1xyXG4gIGNvbnN0IG5ld1N0YXRlID0gc3RhdGUubWFwKChtaXNzaW9uKSA9PiB7XHJcbiAgICBpZiAobWlzc2lvbi5pZCAhPT0gaWQpIHtcclxuICAgICAgcmV0dXJuIG1pc3Npb247XHJcbiAgICB9XHJcbiAgICByZXR1cm4geyAuLi5taXNzaW9uLCByZXNlcnZlZDogdHJ1ZSB9O1xyXG4gIH0pO1xyXG4gIHJldHVybiBuZXdTdGF0ZTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBtaXNzaW9uc0xlZnQgPSAoc3RhdGUsIGlkKSA9PiB7XHJcbiAgY29uc3QgbmV3U3RhdGUgPSBzdGF0ZS5tYXAoKG1pc3Npb24pID0+IHtcclxuICAgIGlmIChtaXNzaW9uLmlkICE9PSBpZCkge1xyXG4gICAgICByZXR1cm4gbWlzc2lvbjtcclxuICAgIH1cclxuICAgIHJldHVybiB7IC4uLm1pc3Npb24sIHJlc2VydmVkOiBmYWxzZSB9O1xyXG4gIH0pO1xyXG4gIHJldHVybiBuZXdTdGF0ZTtcclxufTtcclxuXHJcbmNvbnN0IG1pc3Npb25SZWR1Y2VyID0gKHN0YXRlID0gaW5pdGlhbFN0YXRlLCBhY3Rpb24pID0+IHtcclxuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XHJcbiAgICBjYXNlIEZFVENIX01JU1NJT05TOlxyXG4gICAgICByZXR1cm4geyAuLi5zdGF0ZSwgbG9hZGluZzogdHJ1ZSB9O1xyXG4gICAgY2FzZSBGRVRDSF9NSVNTSU9OU19TVUNDRVNTOlxyXG4gICAgICBwb3B1bGF0ZU1pc3Npb25zKGFjdGlvbi5teU1pc3Npb25zKTtcclxuICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIGxvYWRpbmc6IGZhbHNlLCBtaXNzaW9uczogcG9wdWxhdGVNaXNzaW9ucyhhY3Rpb24ubXlNaXNzaW9ucykgfTtcclxuICAgIGNhc2UgRkVUQ0hfTUlTU0lPTlNfRVJST1I6XHJcbiAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBsb2FkaW5nOiBmYWxzZSwgZXJyb3I6IGFjdGlvbi5lcnJvciB9O1xyXG4gICAgY2FzZSBNSVNTSU9OU19KT0lORUQ6XHJcbiAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBtaXNzaW9uczogSm9pbmVkTWlzc2lvbnMoc3RhdGUubWlzc2lvbnMsIGFjdGlvbi5wYXlsb2FkKSB9O1xyXG4gICAgY2FzZSBNSVNTSU9OU19MRUZUOlxyXG4gICAgICByZXR1cm4geyAuLi5zdGF0ZSwgbWlzc2lvbnM6IG1pc3Npb25zTGVmdChzdGF0ZS5taXNzaW9ucywgYWN0aW9uLnBheWxvYWQpIH07XHJcblxyXG4gICAgZGVmYXVsdDpcclxuICAgICAgcmV0dXJuIHN0YXRlO1xyXG4gIH1cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IG1pc3Npb25SZWR1Y2VyO1xyXG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLE1BQU1BLGNBQWMsR0FBRyxzQ0FBdkI7QUFDQSxNQUFNQyxzQkFBc0IsR0FBRyw4Q0FBL0I7QUFDQSxNQUFNQyxvQkFBb0IsR0FBRyw0Q0FBN0I7QUFDQSxNQUFNQyxlQUFlLEdBQUcsdUNBQXhCO0FBQ0EsTUFBTUMsYUFBYSxHQUFHLHFDQUF0QjtBQUVBLE1BQU1DLE1BQU0sR0FBRyx3Q0FBZjs7QUFFTyxNQUFNQyxXQUFXLEdBQUcsTUFBTSxNQUFPQyxRQUFQLElBQW9CO0VBQ25EQSxRQUFRLENBQUM7SUFBRUMsSUFBSSxFQUFFUjtFQUFSLENBQUQsQ0FBUjtFQUNBLE1BQU1TLFFBQVEsR0FBRyxNQUFNQyxLQUFLLENBQUNMLE1BQUQsQ0FBNUI7RUFDQSxNQUFNTSxVQUFVLEdBQUcsTUFBTUYsUUFBUSxDQUFDRyxJQUFULEVBQXpCO0VBQ0EsT0FBT0wsUUFB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