043bd97e9f3383d0178f83a3ca2e4751
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.missionsLeft = exports.leaveMission = exports.joinMission = exports.getMissions = exports.default = exports.JoinedMissions = void 0;
const FETCH_MISSIONS = 'missions/missionSlice/FETCH_MISSIONS';
const FETCH_MISSIONS_SUCCESS = 'missions/missionSlice/FETCH_MISSIONS_SUCCESS';
const FETCH_MISSIONS_ERROR = 'missions/missionSlice/FETCH_MISSIONS_ERROR';
const MISSIONS_JOINED = 'missions/missionSlice/MISSIONS_JOINED';
const MISSIONS_LEFT = 'missions/missionSlice/MISSIONS_LEFT';
const appUrl = 'https://api.spacexdata.com/v3/missions';

const getMissions = () => async dispatch => {
  dispatch({
    type: FETCH_MISSIONS
  });
  const missions = await fetch(appUrl);
  const myMissions = await missions.json();
  return dispatch({
    type: FETCH_MISSIONS_SUCCESS,
    myMissions
  });
};

exports.getMissions = getMissions;
const initialState = {
  missions: [],
  status: 'fetching',
  loading: false,
  error: null
};

const populateMissions = myMissions => {
  const missionArr = [];

  for (let i = 0; i < myMissions.length; i += 1) {
    missionArr.push({
      id: myMissions[i].mission_id,
      name: myMissions[i].mission_name,
      description: myMissions[i].description,
      reserved: false
    });
  }

  return missionArr;
};

const joinMission = payload => ({
  type: MISSIONS_JOINED,
  payload
});

exports.joinMission = joinMission;

const leaveMission = payload => ({
  type: MISSIONS_LEFT,
  payload
});

exports.leaveMission = leaveMission;

const JoinedMissions = (state, id) => {
  const newState = state.map(mission => {
    if (mission.id !== id) {
      return mission;
    }

    return { ...mission,
      reserved: true
    };
  });
  return newState;
};

exports.JoinedMissions = JoinedMissions;

const missionsLeft = (state, id) => {
  const newState = state.map(mission => {
    if (mission.id !== id) {
      return mission;
    }

    return { ...mission,
      reserved: false
    };
  });
  return newState;
};

exports.missionsLeft = missionsLeft;

const missionReducer = (state = initialState, action) => {
  switch (action.type) {
    case FETCH_MISSIONS:
      return { ...state,
        loading: true
      };

    case FETCH_MISSIONS_SUCCESS:
      populateMissions(action.myMissions);
      return { ...state,
        loading: false,
        missions: populateMissions(action.myMissions)
      };

    case FETCH_MISSIONS_ERROR:
      return { ...state,
        loading: false,
        error: action.error
      };

    case MISSIONS_JOINED:
      return { ...state,
        missions: JoinedMissions(state.missions, action.payload)
      };

    case MISSIONS_LEFT:
      return { ...state,
        missions: missionsLeft(state.missions, action.payload)
      };

    default:
      return state;
  }
};

var _default = missionReducer;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJGRVRDSF9NSVNTSU9OUyIsIkZFVENIX01JU1NJT05TX1NVQ0NFU1MiLCJGRVRDSF9NSVNTSU9OU19FUlJPUiIsIk1JU1NJT05TX0pPSU5FRCIsIk1JU1NJT05TX0xFRlQiLCJhcHBVcmwiLCJnZXRNaXNzaW9ucyIsImRpc3BhdGNoIiwidHlwZSIsIm1pc3Npb25zIiwiZmV0Y2giLCJteU1pc3Npb25zIiwianNvbiIsImluaXRpYWxTdGF0ZSIsInN0YXR1cyIsImxvYWRpbmciLCJlcnJvciIsInBvcHVsYXRlTWlzc2lvbnMiLCJtaXNzaW9uQXJyIiwiaSIsImxlbmd0aCIsInB1c2giLCJpZCIsIm1pc3Npb25faWQiLCJuYW1lIiwibWlzc2lvbl9uYW1lIiwiZGVzY3JpcHRpb24iLCJyZXNlcnZlZCIsImpvaW5NaXNzaW9uIiwicGF5bG9hZCIsImxlYXZlTWlzc2lvbiIsIkpvaW5lZE1pc3Npb25zIiwic3RhdGUiLCJuZXdTdGF0ZSIsIm1hcCIsIm1pc3Npb24iLCJtaXNzaW9uc0xlZnQiLCJtaXNzaW9uUmVkdWNlciIsImFjdGlvbiJdLCJzb3VyY2VzIjpbIm1pc3Npb25zLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEZFVENIX01JU1NJT05TID0gJ21pc3Npb25zL21pc3Npb25TbGljZS9GRVRDSF9NSVNTSU9OUyc7XG5jb25zdCBGRVRDSF9NSVNTSU9OU19TVUNDRVNTID0gJ21pc3Npb25zL21pc3Npb25TbGljZS9GRVRDSF9NSVNTSU9OU19TVUNDRVNTJztcbmNvbnN0IEZFVENIX01JU1NJT05TX0VSUk9SID0gJ21pc3Npb25zL21pc3Npb25TbGljZS9GRVRDSF9NSVNTSU9OU19FUlJPUic7XG5jb25zdCBNSVNTSU9OU19KT0lORUQgPSAnbWlzc2lvbnMvbWlzc2lvblNsaWNlL01JU1NJT05TX0pPSU5FRCc7XG5jb25zdCBNSVNTSU9OU19MRUZUID0gJ21pc3Npb25zL21pc3Npb25TbGljZS9NSVNTSU9OU19MRUZUJztcblxuY29uc3QgYXBwVXJsID0gJ2h0dHBzOi8vYXBpLnNwYWNleGRhdGEuY29tL3YzL21pc3Npb25zJztcblxuZXhwb3J0IGNvbnN0IGdldE1pc3Npb25zID0gKCkgPT4gYXN5bmMgKGRpc3BhdGNoKSA9PiB7XG4gIGRpc3BhdGNoKHsgdHlwZTogRkVUQ0hfTUlTU0lPTlMgfSk7XG4gIGNvbnN0IG1pc3Npb25zID0gYXdhaXQgZmV0Y2goYXBwVXJsKTtcbiAgY29uc3QgbXlNaXNzaW9ucyA9IGF3YWl0IG1pc3Npb25zLmpzb24oKTtcbiAgcmV0dXJuIGRpc3BhdGNoKHsgdHlwZTogRkVUQ0hfTUlTU0lPTlNfU1VDQ0VTUywgbXlNaXNzaW9ucyB9KTtcbn07XG5cbmNvbnN0IGluaXRpYWxTdGF0ZSA9IHtcbiAgbWlzc2lvbnM6IFtdLFxuICBzdGF0dXM6ICdmZXRjaGluZycsXG4gIGxvYWRpbmc6IGZhbHNlLFxuICBlcnJvcjogbnVsbCxcbn07XG5cbmNvbnN0IHBvcHVsYXRlTWlzc2lvbnMgPSAobXlNaXNzaW9ucykgPT4ge1xuICBjb25zdCBtaXNzaW9uQXJyID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbXlNaXNzaW9ucy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIG1pc3Npb25BcnIucHVzaCh7XG4gICAgICBpZDogbXlNaXNzaW9uc1tpXS5taXNzaW9uX2lkLFxuICAgICAgbmFtZTogbXlNaXNzaW9uc1tpXS5taXNzaW9uX25hbWUsXG4gICAgICBkZXNjcmlwdGlvbjogbXlNaXNzaW9uc1tpXS5kZXNjcmlwdGlvbixcbiAgICAgIHJlc2VydmVkOiBmYWxzZSxcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gbWlzc2lvbkFycjtcbn07XG5cbmV4cG9ydCBjb25zdCBqb2luTWlzc2lvbiA9IChwYXlsb2FkKSA9PiAoXG4gIHtcbiAgICB0eXBlOiBNSVNTSU9OU19KT0lORUQsXG4gICAgcGF5bG9hZCxcbiAgfVxuKTtcblxuZXhwb3J0IGNvbnN0IGxlYXZlTWlzc2lvbiA9IChwYXlsb2FkKSA9PiAoXG4gIHtcbiAgICB0eXBlOiBNSVNTSU9OU19MRUZULFxuICAgIHBheWxvYWQsXG4gIH1cbik7XG5cbmV4cG9ydCBjb25zdCBKb2luZWRNaXNzaW9ucyA9IChzdGF0ZSwgaWQpID0+IHtcbiAgY29uc3QgbmV3U3RhdGUgPSBzdGF0ZS5tYXAoKG1pc3Npb24pID0+IHtcbiAgICBpZiAobWlzc2lvbi5pZCAhPT0gaWQpIHtcbiAgICAgIHJldHVybiBtaXNzaW9uO1xuICAgIH1cbiAgICByZXR1cm4geyAuLi5taXNzaW9uLCByZXNlcnZlZDogdHJ1ZSB9O1xuICB9KTtcbiAgcmV0dXJuIG5ld1N0YXRlO1xufTtcblxuZXhwb3J0IGNvbnN0IG1pc3Npb25zTGVmdCA9IChzdGF0ZSwgaWQpID0+IHtcbiAgY29uc3QgbmV3U3RhdGUgPSBzdGF0ZS5tYXAoKG1pc3Npb24pID0+IHtcbiAgICBpZiAobWlzc2lvbi5pZCAhPT0gaWQpIHtcbiAgICAgIHJldHVybiBtaXNzaW9uO1xuICAgIH1cbiAgICByZXR1cm4geyAuLi5taXNzaW9uLCByZXNlcnZlZDogZmFsc2UgfTtcbiAgfSk7XG4gIHJldHVybiBuZXdTdGF0ZTtcbn07XG5cbmNvbnN0IG1pc3Npb25SZWR1Y2VyID0gKHN0YXRlID0gaW5pdGlhbFN0YXRlLCBhY3Rpb24pID0+IHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgRkVUQ0hfTUlTU0lPTlM6XG4gICAgICByZXR1cm4geyAuLi5zdGF0ZSwgbG9hZGluZzogdHJ1ZSB9O1xuICAgIGNhc2UgRkVUQ0hfTUlTU0lPTlNfU1VDQ0VTUzpcbiAgICAgIHBvcHVsYXRlTWlzc2lvbnMoYWN0aW9uLm15TWlzc2lvbnMpO1xuICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIGxvYWRpbmc6IGZhbHNlLCBtaXNzaW9uczogcG9wdWxhdGVNaXNzaW9ucyhhY3Rpb24ubXlNaXNzaW9ucykgfTtcbiAgICBjYXNlIEZFVENIX01JU1NJT05TX0VSUk9SOlxuICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIGxvYWRpbmc6IGZhbHNlLCBlcnJvcjogYWN0aW9uLmVycm9yIH07XG4gICAgY2FzZSBNSVNTSU9OU19KT0lORUQ6XG4gICAgICByZXR1cm4geyAuLi5zdGF0ZSwgbWlzc2lvbnM6IEpvaW5lZE1pc3Npb25zKHN0YXRlLm1pc3Npb25zLCBhY3Rpb24ucGF5bG9hZCkgfTtcbiAgICBjYXNlIE1JU1NJT05TX0xFRlQ6XG4gICAgICByZXR1cm4geyAuLi5zdGF0ZSwgbWlzc2lvbnM6IG1pc3Npb25zTGVmdChzdGF0ZS5taXNzaW9ucywgYWN0aW9uLnBheWxvYWQpIH07XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBtaXNzaW9uUmVkdWNlcjtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsTUFBTUEsY0FBYyxHQUFHLHNDQUF2QjtBQUNBLE1BQU1DLHNCQUFzQixHQUFHLDhDQUEvQjtBQUNBLE1BQU1DLG9CQUFvQixHQUFHLDRDQUE3QjtBQUNBLE1BQU1DLGVBQWUsR0FBRyx1Q0FBeEI7QUFDQSxNQUFNQyxhQUFhLEdBQUcscUNBQXRCO0FBRUEsTUFBTUMsTUFBTSxHQUFHLHdDQUFmOztBQUVPLE1BQU1DLFdBQVcsR0FBRyxNQUFNLE1BQU9DLFFBQVAsSUFBb0I7RUFDbkRBLFFBQVEsQ0FBQztJQUFFQyxJQUFJLEVBQUVSO0VBQVIsQ0FBRCxDQUFSO0VBQ0EsTUFBTVMsUUFBUSxHQUFHLE1BQU1DLEtBQUssQ0FBQ0wsTUFBRCxDQUE1QjtFQUNBLE1BQU1NLFVBQVUsR0FBRyxNQUFNRixRQUFRLENBQUNHLElBQVQsRUFBekI7RUFDQSxPQUFPTCxRQUFRLENBQUM7SUFBRUMsSUFBSSxFQUFFUCxzQkFBUjtJQUFnQ1U7RUFBaEMsQ0FBRCxDQUFmO0FBQ0QsQ0FMTTs7O0FBT1AsTUFBTUUsWUFBWSxHQUFHO0VBQ25CSixRQUFRLEVBQUUsRUFEUztFQUVuQkssTUFBTSxFQUFFLFVBRlc7RUFHbkJDLE9BQU8sRUFBRSxLQUhVO0VBSW5CQyxLQUFLLEVBQUU7QUFKWSxDQUFy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