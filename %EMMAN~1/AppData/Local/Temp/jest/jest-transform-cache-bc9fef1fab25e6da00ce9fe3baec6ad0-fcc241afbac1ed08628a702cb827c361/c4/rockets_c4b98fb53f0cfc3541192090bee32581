93d67487561f4b3b46dd2e9f37961b1a
"use strict";

var _interopRequireDefault = require("C:/Users/Otomfon/Desktop/space_travelers_hub/node_modules/@babel/runtime/helpers/interopRequireDefault.js").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fetchRocketApi = exports.default = exports.bookRocket = void 0;

var _axios = _interopRequireDefault(require("axios"));

// conts
const FETCH_ROCKET = 'space-practice/rockets/FETCH_ROCKET';
const BOOK_ROCKET = 'space-practice/rockets/BOOK_ROCKET'; // actions

const fetchRocket = payload => ({
  type: FETCH_ROCKET,
  payload
});

const bookRocket = payload => ({
  type: BOOK_ROCKET,
  payload
}); //   APIs-functions


exports.bookRocket = bookRocket;

const fetchRocketApi = () => async dispatch => {
  const returnValue = await _axios.default.get('https://api.spacexdata.com/v3/rockets');
  const {
    data
  } = returnValue;
  const rockets = [];

  for (let i = 0; i < data.length; i += 1) {
    const name = data[i].rocket_name;
    const {
      id
    } = data[i];
    const {
      description
    } = data[i];
    const image = data[i].flickr_images[0];
    const reserved = false;
    const object = {
      id,
      name,
      description,
      image,
      reserved
    };
    rockets.push(object);
  }

  dispatch(fetchRocket(rockets));
}; // rocket-booking


exports.fetchRocketApi = fetchRocketApi;

const reserveCancelRocket = (state, payload) => {
  const newState = state.map(rocket => {
    if (rocket.id !== payload) return rocket;
    return { ...rocket,
      reserved: !rocket.reserved
    };
  });
  return newState;
}; // state


const initialState = []; // reducer

const reducer = (state = initialState, action) => {
  switch (action.type) {
    case FETCH_ROCKET:
      return action.payload;

    case BOOK_ROCKET:
      return reserveCancelRocket(state, action.payload);

    default:
      return state;
  }
};

var _default = reducer;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJGRVRDSF9ST0NLRVQiLCJCT09LX1JPQ0tFVCIsImZldGNoUm9ja2V0IiwicGF5bG9hZCIsInR5cGUiLCJib29rUm9ja2V0IiwiZmV0Y2hSb2NrZXRBcGkiLCJkaXNwYXRjaCIsInJldHVyblZhbHVlIiwiQXhpb3MiLCJnZXQiLCJkYXRhIiwicm9ja2V0cyIsImkiLCJsZW5ndGgiLCJuYW1lIiwicm9ja2V0X25hbWUiLCJpZCIsImRlc2NyaXB0aW9uIiwiaW1hZ2UiLCJmbGlja3JfaW1hZ2VzIiwicmVzZXJ2ZWQiLCJvYmplY3QiLCJwdXNoIiwicmVzZXJ2ZUNhbmNlbFJvY2tldCIsInN0YXRlIiwibmV3U3RhdGUiLCJtYXAiLCJyb2NrZXQiLCJpbml0aWFsU3RhdGUiLCJyZWR1Y2VyIiwiYWN0aW9uIl0sInNvdXJjZXMiOlsicm9ja2V0cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQXhpb3MgZnJvbSAnYXhpb3MnO1xyXG5cclxuLy8gY29udHNcclxuY29uc3QgRkVUQ0hfUk9DS0VUID0gJ3NwYWNlLXByYWN0aWNlL3JvY2tldHMvRkVUQ0hfUk9DS0VUJztcclxuY29uc3QgQk9PS19ST0NLRVQgPSAnc3BhY2UtcHJhY3RpY2Uvcm9ja2V0cy9CT09LX1JPQ0tFVCc7XHJcblxyXG4vLyBhY3Rpb25zXHJcbmNvbnN0IGZldGNoUm9ja2V0ID0gKHBheWxvYWQpID0+ICh7XHJcbiAgdHlwZTogRkVUQ0hfUk9DS0VULFxyXG4gIHBheWxvYWQsXHJcbn0pO1xyXG5cclxuZXhwb3J0IGNvbnN0IGJvb2tSb2NrZXQgPSAocGF5bG9hZCkgPT4gKHtcclxuICB0eXBlOiBCT09LX1JPQ0tFVCxcclxuICBwYXlsb2FkLFxyXG59KTtcclxuXHJcbi8vICAgQVBJcy1mdW5jdGlvbnNcclxuXHJcbmV4cG9ydCBjb25zdCBmZXRjaFJvY2tldEFwaSA9ICgpID0+IGFzeW5jIChkaXNwYXRjaCkgPT4ge1xyXG4gIGNvbnN0IHJldHVyblZhbHVlID0gYXdhaXQgQXhpb3MuZ2V0KCdodHRwczovL2FwaS5zcGFjZXhkYXRhLmNvbS92My9yb2NrZXRzJyk7XHJcbiAgY29uc3QgeyBkYXRhIH0gPSByZXR1cm5WYWx1ZTtcclxuICBjb25zdCByb2NrZXRzID0gW107XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSArPSAxKSB7XHJcbiAgICBjb25zdCBuYW1lID0gZGF0YVtpXS5yb2NrZXRfbmFtZTtcclxuICAgIGNvbnN0IHsgaWQgfSA9IGRhdGFbaV07XHJcbiAgICBjb25zdCB7IGRlc2NyaXB0aW9uIH0gPSBkYXRhW2ldO1xyXG4gICAgY29uc3QgaW1hZ2UgPSBkYXRhW2ldLmZsaWNrcl9pbWFnZXNbMF07XHJcbiAgICBjb25zdCByZXNlcnZlZCA9IGZhbHNlO1xyXG4gICAgY29uc3Qgb2JqZWN0ID0ge1xyXG4gICAgICBpZCwgbmFtZSwgZGVzY3JpcHRpb24sIGltYWdlLCByZXNlcnZlZCxcclxuICAgIH07XHJcbiAgICByb2NrZXRzLnB1c2gob2JqZWN0KTtcclxuICB9XHJcbiAgZGlzcGF0Y2goZmV0Y2hSb2NrZXQocm9ja2V0cykpO1xyXG59O1xyXG5cclxuLy8gcm9ja2V0LWJvb2tpbmdcclxuXHJcbmNvbnN0IHJlc2VydmVDYW5jZWxSb2NrZXQgPSAoc3RhdGUsIHBheWxvYWQpID0+IHtcclxuICBjb25zdCBuZXdTdGF0ZSA9IHN0YXRlLm1hcCgocm9ja2V0KSA9PiB7XHJcbiAgICBpZiAocm9ja2V0LmlkICE9PSBwYXlsb2FkKSByZXR1cm4gcm9ja2V0O1xyXG4gICAgcmV0dXJuIHsgLi4ucm9ja2V0LCByZXNlcnZlZDogIXJvY2tldC5yZXNlcnZlZCB9O1xyXG4gIH0pO1xyXG4gIHJldHVybiBuZXdTdGF0ZTtcclxufTtcclxuXHJcbi8vIHN0YXRlXHJcbmNvbnN0IGluaXRpYWxTdGF0ZSA9IFtdO1xyXG5cclxuLy8gcmVkdWNlclxyXG5jb25zdCByZWR1Y2VyID0gKHN0YXRlID0gaW5pdGlhbFN0YXRlLCBhY3Rpb24pID0+IHtcclxuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XHJcbiAgICBjYXNlIEZFVENIX1JPQ0tFVDpcclxuICAgICAgcmV0dXJuIGFjdGlvbi5wYXlsb2FkO1xyXG4gICAgY2FzZSBCT09LX1JPQ0tFVDpcclxuICAgICAgcmV0dXJuIHJlc2VydmVDYW5jZWxSb2NrZXQoc3RhdGUsIGFjdGlvbi5wYXlsb2FkKTtcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJldHVybiBzdGF0ZTtcclxuICB9XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCByZWR1Y2VyO1xyXG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUVBO0FBQ0EsTUFBTUEsWUFBWSxHQUFHLHFDQUFyQjtBQUNBLE1BQU1DLFdBQVcsR0FBRyxvQ0FBcEIsQyxDQUVBOztBQUNBLE1BQU1DLFdBQVcsR0FBSUMsT0FBRCxLQUFjO0VBQ2hDQyxJQUFJLEVBQUVKLFlBRDBCO0VBRWhDRztBQUZnQyxDQUFkLENBQXBCOztBQUtPLE1BQU1FLFVBQVUsR0FBSUYsT0FBRCxLQUFjO0VBQ3RDQyxJQUFJLEVBQUVILFdBRGdDO0VBRXRDRTtBQUZzQyxDQUFkLENBQW5CLEMsQ0FLUDs7Ozs7QUFFTyxNQUFNRyxjQUFjLEdBQUcsTUFBTSxNQUFPQyxRQUFQLElBQW9CO0VBQ3RELE1BQU1DLFdBQVcsR0FBRyxNQUFNQyxjQUFBLENBQU1DLEdBQU4sQ0FBVSx1Q0FBVixDQUExQjtFQUNBLE1BQU07SUFBRUM7RUFBRixJQUFXSCxXQUFqQjtFQUNBLE1BQU1JLE9BQU8sR0FBRyxFQUFoQjs7RUFDQSxLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdGLElBQUksQ0FBQ0csTUFBekIsRUFBaUNELENBQUMsSUFBSSxDQUF0QyxFQUF5QztJQUN2QyxNQUFNRSxJQUFJLEdBQUdKLElBQUksQ0FBQ0UsQ0FBRCxDQUFKLENBQVFHLFdBQXJCO0lBQ0EsTUFBTTtNQUFFQztJQUFGLElBQVNOLElBQUksQ0FBQ0UsQ0FBRCxDQUFuQjtJQUNBLE1BQU07TUFBRUs7SUFBRixJQUFrQlAsSUFBSSxDQUFDRSxDQUFELENBQTVCO0lBQ0EsTUFBTU0sS0FBSyxHQUFHUixJQUFJLENBQUNFLENBQUQsQ0FBSixDQUFRTyxhQUFSLENBQXNCLENBQXRCLENBQWQ7SUFDQSxNQUFNQyxRQUFRLEdBQUcsS0FBakI7SUFDQSxNQUFNQyxNQUFNLEdBQUc7TUFDYkwsRUFEYTtNQUNURixJQURTO01BQ0hHLFdBREc7TUFDVUMsS0FEVjtNQUNpQkU7SUFEakIsQ0FBZjtJQUdBVCxPQUFPLENBQUNXLElBQVIsQ0FBYUQsTUFBYjtFQUNEOztFQUNEZixRQUFRLENBQUNMLFdBQVcsQ0FBQ1UsT0FBRCxDQUFaLENBQVI7QUFDRCxDQWhCTSxDLENBa0JQOzs7OztBQUVBLE1BQU1ZLG1CQUFtQixHQUFHLENBQUNDLEtBQUQsRUFBUXRCLE9BQVIsS0FBb0I7RUFDOUMsTUFBTXVCLFFBQVEsR0FBR0QsS0FBSyxDQUFDRSxHQUFOLENBQVdDLE1BQUQsSUFBWTtJQUNyQyxJQUFJQSxNQUFNLENBQUNYLEVBQVAsS0FBY2QsT0FBbEIsRUFBMkIsT0FBT3lCLE1BQVA7SUFDM0IsT0FBTyxFQUFFLEdBQUdBLE1BQUw7TUFBYVAsUUFBUSxFQUFFLENBQUNPLE1BQU0sQ0FBQ1A7SUFBL0IsQ0FBUDtFQUNELENBSGdCLENBQWpCO0VBSUEsT0FBT0ssUUFBUDtBQUNELENBTkQsQyxDQVFBOzs7QUFDQSxNQUFNRyxZQUFZLEdBQUcsRUFBckIsQyxDQUVBOztBQUNBLE1BQU1DLE9BQU8sR0FBRyxDQUFDTCxLQUFLLEdBQUdJLFlBQVQsRUFBdUJFLE1BQXZCLEtBQWtDO0VBQ2hELFFBQVFBLE1BQU0sQ0FBQzNCLElBQWY7SUFDRSxLQUFLSixZQUFMO01BQ0UsT0FBTytCLE1BQU0sQ0FBQzVCLE9BQWQ7O0lBQ0YsS0FBS0YsV0FBTDtNQUNFLE9BQU91QixtQkFBbUIsQ0FBQ0MsS0FBRCxFQUFRTSxNQUFNLENBQUM1QixPQUFmLENBQTFCOztJQUNGO01BQ0UsT0FBT3NCLEtBQVA7RUFOSjtBQVFELENBVEQ7O2VBV2VLLE8ifQ==